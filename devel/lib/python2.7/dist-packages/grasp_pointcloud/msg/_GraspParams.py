# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from grasp_pointcloud/GraspParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GraspParams(genpy.Message):
  _md5sum = "28bf0de5a6fc99a5d51ec496c974cccc"
  _type = "grasp_pointcloud/GraspParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 rotate_angle
float64 tilt_angle
float64 grasp_width_first
float64 grasp_width_second
"""
  __slots__ = ['x','y','z','rotate_angle','tilt_angle','grasp_width_first','grasp_width_second']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,rotate_angle,tilt_angle,grasp_width_first,grasp_width_second

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraspParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.rotate_angle is None:
        self.rotate_angle = 0.
      if self.tilt_angle is None:
        self.tilt_angle = 0.
      if self.grasp_width_first is None:
        self.grasp_width_first = 0.
      if self.grasp_width_second is None:
        self.grasp_width_second = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.rotate_angle = 0.
      self.tilt_angle = 0.
      self.grasp_width_first = 0.
      self.grasp_width_second = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.x, _x.y, _x.z, _x.rotate_angle, _x.tilt_angle, _x.grasp_width_first, _x.grasp_width_second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.x, _x.y, _x.z, _x.rotate_angle, _x.tilt_angle, _x.grasp_width_first, _x.grasp_width_second,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.x, _x.y, _x.z, _x.rotate_angle, _x.tilt_angle, _x.grasp_width_first, _x.grasp_width_second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.x, _x.y, _x.z, _x.rotate_angle, _x.tilt_angle, _x.grasp_width_first, _x.grasp_width_second,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
