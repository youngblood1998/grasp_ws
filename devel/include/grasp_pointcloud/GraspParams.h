// Generated by gencpp from file grasp_pointcloud/GraspParams.msg
// DO NOT EDIT!


#ifndef GRASP_POINTCLOUD_MESSAGE_GRASPPARAMS_H
#define GRASP_POINTCLOUD_MESSAGE_GRASPPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasp_pointcloud
{
template <class ContainerAllocator>
struct GraspParams_
{
  typedef GraspParams_<ContainerAllocator> Type;

  GraspParams_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , rotate_angle(0.0)
    , tilt_angle(0.0)
    , grasp_width_first(0.0)
    , grasp_width_second(0.0)  {
    }
  GraspParams_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , rotate_angle(0.0)
    , tilt_angle(0.0)
    , grasp_width_first(0.0)
    , grasp_width_second(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _rotate_angle_type;
  _rotate_angle_type rotate_angle;

   typedef double _tilt_angle_type;
  _tilt_angle_type tilt_angle;

   typedef double _grasp_width_first_type;
  _grasp_width_first_type grasp_width_first;

   typedef double _grasp_width_second_type;
  _grasp_width_second_type grasp_width_second;





  typedef boost::shared_ptr< ::grasp_pointcloud::GraspParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_pointcloud::GraspParams_<ContainerAllocator> const> ConstPtr;

}; // struct GraspParams_

typedef ::grasp_pointcloud::GraspParams_<std::allocator<void> > GraspParams;

typedef boost::shared_ptr< ::grasp_pointcloud::GraspParams > GraspParamsPtr;
typedef boost::shared_ptr< ::grasp_pointcloud::GraspParams const> GraspParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_pointcloud::GraspParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grasp_pointcloud

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'grasp_pointcloud': ['/home/jay/grasp_ws/src/grasp_pointcloud/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_pointcloud::GraspParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_pointcloud::GraspParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_pointcloud::GraspParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28bf0de5a6fc99a5d51ec496c974cccc";
  }

  static const char* value(const ::grasp_pointcloud::GraspParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28bf0de5a6fc99a5ULL;
  static const uint64_t static_value2 = 0xd51ec496c974ccccULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_pointcloud/GraspParams";
  }

  static const char* value(const ::grasp_pointcloud::GraspParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
float64 z\n\
float64 rotate_angle\n\
float64 tilt_angle\n\
float64 grasp_width_first\n\
float64 grasp_width_second\n\
";
  }

  static const char* value(const ::grasp_pointcloud::GraspParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rotate_angle);
      stream.next(m.tilt_angle);
      stream.next(m.grasp_width_first);
      stream.next(m.grasp_width_second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_pointcloud::GraspParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_pointcloud::GraspParams_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "rotate_angle: ";
    Printer<double>::stream(s, indent + "  ", v.rotate_angle);
    s << indent << "tilt_angle: ";
    Printer<double>::stream(s, indent + "  ", v.tilt_angle);
    s << indent << "grasp_width_first: ";
    Printer<double>::stream(s, indent + "  ", v.grasp_width_first);
    s << indent << "grasp_width_second: ";
    Printer<double>::stream(s, indent + "  ", v.grasp_width_second);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_POINTCLOUD_MESSAGE_GRASPPARAMS_H
